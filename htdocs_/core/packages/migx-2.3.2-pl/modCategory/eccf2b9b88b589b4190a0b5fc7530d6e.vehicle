<?php return array (
  'unique_key' => 'category',
  'preserve_keys' => false,
  'update_object' => true,
  'related_objects' => 
  array (
    'Snippets' => 
    array (
      'af3371918811dba09c72424e737f2357' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":1,"source":0,"property_preprocess":0,"name":"getImageList","description":"","editor_type":0,"category":1,"cache_type":0,"snippet":"\\/**\\n * getImageList\\n *\\n * Copyright 2009-2011 by Bruno Perner <b.perner@gmx.de>\\n *\\n * getImageList is free software; you can redistribute it and\\/or modify it\\n * under the terms of the GNU General Public License as published by the Free\\n * Software Foundation; either version 2 of the License, or (at your option) any\\n * later version.\\n *\\n * getImageList is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * getImageList; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\n * Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package migx\\n *\\/\\n\\/**\\n * getImageList\\n *\\n * display Items from outputvalue of TV with custom-TV-input-type MIGX or from other JSON-string for MODx Revolution \\n *\\n * @version 1.4\\n * @author Bruno Perner <b.perner@gmx.de>\\n * @copyright Copyright &copy; 2009-2011\\n * @license http:\\/\\/www.gnu.org\\/licenses\\/old-licenses\\/gpl-2.0.html GNU General Public License\\n * version 2 or (at your option) any later version.\\n * @package migx\\n *\\/\\n\\n\\/*example: <ul>[[!getImageList? &tvname=`myTV`&tpl=`@CODE:<li>[[+idx]]<img src=\\"[[+imageURL]]\\"\\/><p>[[+imageAlt]]<\\/p><\\/li>`]]<\\/ul>*\\/\\n\\/* get default properties *\\/\\n\\n\\n$tvname = $modx->getOption(\'tvname\', $scriptProperties, \'\');\\n$tpl = $modx->getOption(\'tpl\', $scriptProperties, \'\');\\n$limit = $modx->getOption(\'limit\', $scriptProperties, \'0\');\\n$offset = $modx->getOption(\'offset\', $scriptProperties, 0);\\n$totalVar = $modx->getOption(\'totalVar\', $scriptProperties, \'total\');\\n$randomize = $modx->getOption(\'randomize\', $scriptProperties, false);\\n$preselectLimit = $modx->getOption(\'preselectLimit\', $scriptProperties, 0); \\/\\/ when random preselect important images\\n$where = $modx->getOption(\'where\', $scriptProperties, \'\');\\n$where = !empty($where) ? $modx->fromJSON($where) : array();\\n$sort = $modx->getOption(\'sort\', $scriptProperties, \'\');\\n$sort = !empty($sort) ? $modx->fromJSON($sort) : array();\\n$toSeparatePlaceholders = $modx->getOption(\'toSeparatePlaceholders\', $scriptProperties, false);\\n$toPlaceholder = $modx->getOption(\'toPlaceholder\', $scriptProperties, false);\\n$outputSeparator = $modx->getOption(\'outputSeparator\', $scriptProperties, \'\');\\n$placeholdersKeyField = $modx->getOption(\'placeholdersKeyField\', $scriptProperties, \'MIGX_id\');\\n$toJsonPlaceholder = $modx->getOption(\'toJsonPlaceholder\', $scriptProperties, false);\\n$jsonVarKey = $modx->getOption(\'jsonVarKey\', $scriptProperties, \'migx_outputvalue\');\\n$outputvalue = $modx->getOption(\'value\', $scriptProperties, \'\');\\n$outputvalue = isset($_REQUEST[$jsonVarKey]) ? $_REQUEST[$jsonVarKey] : $outputvalue;\\n$docidVarKey = $modx->getOption(\'docidVarKey\', $scriptProperties, \'migx_docid\');\\n$docid = $modx->getOption(\'docid\', $scriptProperties, (isset($modx->resource) ? $modx->resource->get(\'id\') : 1));\\n$docid = isset($_REQUEST[$docidVarKey]) ? $_REQUEST[$docidVarKey] : $docid;\\n$processTVs = $modx->getOption(\'processTVs\', $scriptProperties, \'1\');\\n\\n$base_path = $modx->getOption(\'base_path\', null, MODX_BASE_PATH);\\n$base_url = $modx->getOption(\'base_url\', null, MODX_BASE_URL);\\n\\n$migx = $modx->getService(\'migx\', \'Migx\', $modx->getOption(\'migx.core_path\', null, $modx->getOption(\'core_path\') . \'components\\/migx\\/\') . \'model\\/migx\\/\', $scriptProperties);\\nif (!($migx instanceof Migx)) return \'\';\\n$migx->working_context = $modx->resource->get(\'context_key\');\\n\\n\\nif (!empty($tvname)) {\\n    if ($tv = $modx->getObject(\'modTemplateVar\', array(\'name\' => $tvname))) {\\n\\n        \\/*\\n        *   get inputProperties\\n        *\\/\\n\\n\\n        $properties = $tv->get(\'input_properties\');\\n        $properties = isset($properties[\'formtabs\']) ? $properties : $tv->getProperties();\\n\\n        $migx->config[\'configs\'] = $properties[\'configs\'];\\n        $migx->loadConfigs();\\n        \\/\\/ get tabs from file or migx-config-table\\n        $formtabs = $migx->getTabs();\\n        if (empty($formtabs)) {\\n            \\/\\/try to get formtabs and its fields from properties\\n            $formtabs = $modx->fromJSON($properties[\'formtabs\']);\\n        }\\n\\n        if (!empty($properties[\'basePath\'])) {\\n            if ($properties[\'autoResourceFolders\'] == \'true\') {\\n                $scriptProperties[\'base_path\'] = $base_path . $properties[\'basePath\'] . $docid . \'\\/\';\\n                $scriptProperties[\'base_url\'] = $base_url . $properties[\'basePath\'] . $docid . \'\\/\';\\n            } else {\\n                $scriptProperties[\'base_path\'] = $base_path . $properties[\'base_path\'];\\n                $scriptProperties[\'base_url\'] = $base_url . $properties[\'basePath\'];\\n            }\\n        }\\n        if ($jsonVarKey == \'migx_outputvalue\' && !empty($properties[\'jsonvarkey\'])) {\\n            $jsonVarKey = $properties[\'jsonvarkey\'];\\n            $outputvalue = isset($_REQUEST[$jsonVarKey]) ? $_REQUEST[$jsonVarKey] : $outputvalue;\\n        }\\n        $outputvalue = empty($outputvalue) ? $tv->renderOutput($docid) : $outputvalue;\\n        \\/*\\n        *   get inputTvs \\n        *\\/\\n        $inputTvs = array();\\n        if (is_array($formtabs)) {\\n\\n            \\/\\/multiple different Forms\\n            \\/\\/ Note: use same field-names and inputTVs in all forms\\n            $inputTvs = $migx->extractInputTvs($formtabs);\\n        }\\n\\n    }\\n    $migx->source = $tv->getSource($migx->working_context, false);\\n}\\n\\nif (empty($outputvalue)) {\\n    return \'\';\\n}\\n\\n\\/\\/echo $outputvalue.\'<br\\/><br\\/>\';\\n\\n\\n$items = $modx->fromJSON($outputvalue);\\n$modx->setPlaceholder($totalVar, count($items));\\n\\n\\/\\/ where filter\\nif (is_array($where) && count($where) > 0) {\\n    $items = $migx->filterItems($where, $items);\\n}\\n\\n\\/\\/ sort items\\nif (is_array($sort) && count($sort) > 0) {\\n    $items = $migx->sortDbResult($items, $sort);\\n}\\n\\n\\nif (count($items) > 0) {\\n    $items = $offset > 0 ? array_slice($items, $offset) : $items;\\n    $count = count($items);\\n    $limit = $limit == 0 || $limit > $count ? $count : $limit;\\n    $preselectLimit = $preselectLimit > $count ? $count : $preselectLimit;\\n    \\/\\/preselect important items\\n    $preitems = array();\\n    if ($randomize && $preselectLimit > 0) {\\n        for ($i = 0; $i < $preselectLimit; $i++) {\\n            $preitems[] = $items[$i];\\n            unset($items[$i]);\\n        }\\n        $limit = $limit - count($preitems);\\n    }\\n\\n    \\/\\/shuffle items\\n    if ($randomize) {\\n        shuffle($items);\\n    }\\n\\n    \\/\\/limit items\\n    $tempitems = array();\\n    for ($i = 0; $i < $limit; $i++) {\\n        $tempitems[] = $items[$i];\\n    }\\n    $items = $tempitems;\\n\\n    \\/\\/add preselected items and schuffle again\\n    if ($randomize && $preselectLimit > 0) {\\n        $items = array_merge($preitems, $items);\\n        shuffle($items);\\n    }\\n\\n    $properties = array();\\n    foreach ($scriptProperties as $property => $value) {\\n        $properties[\'property.\' . $property] = $value;\\n    }\\n\\n    $idx = 0;\\n    $output = array();\\n    foreach ($items as $key => $item) {\\n\\n        $fields = array();\\n        foreach ($item as $field => $value) {\\n            $value = is_array($value) ? implode(\'||\', $value) : $value; \\/\\/handle arrays (checkboxes, multiselects)\\n            if ($processTVs && isset($inputTvs[$field])) {\\n                if ($tv = $modx->getObject(\'modTemplateVar\', array(\'name\' => $inputTvs[$field][\'inputTV\']))) {\\n\\n                } else {\\n                    $tv = $modx->newObject(\'modTemplateVar\');\\n                    $tv->set(\'type\',$inputTvs[$field][\'inputTVtype\']);\\n                }\\n                $inputTV = $inputTvs[$field];\\n  \\n                $mTypes = $modx->getOption(\'manipulatable_url_tv_output_types\', null, \'image,file\');\\n                \\/\\/don\'t manipulate any urls here\\n                $modx->setOption(\'manipulatable_url_tv_output_types\', \'\');\\n                $tv->set(\'default_text\', $value);\\n                $value = $tv->renderOutput($docid);\\n                \\/\\/set option back\\n                $modx->setOption(\'manipulatable_url_tv_output_types\', $mTypes);\\n                \\/\\/now manipulate urls\\n                if ($mediasource = $migx->getFieldSource($inputTV, $tv)) {\\n                     $mTypes = explode(\',\', $mTypes);\\n                    if (!empty($value) && in_array($tv->get(\'type\'), $mTypes)) {\\n                        \\/\\/$value = $mediasource->prepareOutputUrl($value);\\n                        $value = str_replace(\'\\/.\\/\', \'\\/\', $mediasource->prepareOutputUrl($value));\\n                    }\\n                }\\n\\n            }\\n            $fields[$field] = $value;\\n\\n        }\\n        if ($toJsonPlaceholder) {\\n            $output[] = $fields;\\n        } else {\\n            $fields[\'_alt\'] = $idx % 2;\\n            $idx++;\\n            $fields[\'_first\'] = $idx == 1 ? true : \'\';\\n            $fields[\'_last\'] = $idx == $limit ? true : \'\';\\n            $fields[\'idx\'] = $idx;\\n            $rowtpl = $tpl;\\n            \\/\\/get changing tpls from field\\n            if (substr($tpl, 0, 7) == \\"@FIELD:\\") {\\n                $tplField = substr($tpl, 7);\\n                $rowtpl = $fields[$tplField];\\n            }\\n\\n            if (!isset($template[$rowtpl])) {\\n                if (substr($rowtpl, 0, 6) == \\"@FILE:\\") {\\n                    $template[$rowtpl] = file_get_contents($modx->config[\'base_path\'] . substr($rowtpl, 6));\\n                } elseif (substr($rowtpl, 0, 6) == \\"@CODE:\\") {\\n                    $template[$rowtpl] = substr($tpl, 6);\\n                } elseif ($chunk = $modx->getObject(\'modChunk\', array(\'name\' => $rowtpl), true)) {\\n                    $template[$rowtpl] = $chunk->getContent();\\n                } else {\\n                    $template[$rowtpl] = false;\\n                }\\n            }\\n\\n            $fields = array_merge($fields, $properties);\\n\\n            if ($template[$rowtpl]) {\\n                $chunk = $modx->newObject(\'modChunk\');\\n                $chunk->setCacheable(false);\\n                $chunk->setContent($template[$rowtpl]);\\n                if (!empty($placeholdersKeyField) && isset($fields[$placeholdersKeyField])) {\\n                    $output[$fields[$placeholdersKeyField]] = $chunk->process($fields);\\n                } else {\\n                    $output[] = $chunk->process($fields);\\n                }\\n            } else {\\n                if (!empty($placeholdersKeyField)) {\\n                    $output[$fields[$placeholdersKeyField]] = \'<pre>\' . print_r($fields, 1) . \'<\\/pre>\';\\n                } else {\\n                    $output[] = \'<pre>\' . print_r($fields, 1) . \'<\\/pre>\';\\n                }\\n            }\\n        }\\n\\n\\n    }\\n}\\n\\nif ($toJsonPlaceholder) {\\n    $modx->setPlaceholder($toJsonPlaceholder, $modx->toJson($output));\\n    return \'\';\\n}\\n\\nif (!empty($toSeparatePlaceholders)) {\\n    $modx->toPlaceholders($output, $toSeparatePlaceholders);\\n    return \'\';\\n}\\n\\/*\\nif (!empty($outerTpl))\\n$o = parseTpl($outerTpl, array(\'output\'=>implode($outputSeparator, $output)));\\nelse \\n*\\/\\nif (is_array($output)) {\\n    $o = implode($outputSeparator, $output);\\n} else {\\n    $o = $output;\\n}\\n\\nif (!empty($toPlaceholder)) {\\n    $modx->setPlaceholder($toPlaceholder, $o);\\n    return \'\';\\n}\\n\\nreturn $o;","locked":0,"properties":null,"moduleguid":"","static":0,"static_file":"","content":"\\/**\\n * getImageList\\n *\\n * Copyright 2009-2011 by Bruno Perner <b.perner@gmx.de>\\n *\\n * getImageList is free software; you can redistribute it and\\/or modify it\\n * under the terms of the GNU General Public License as published by the Free\\n * Software Foundation; either version 2 of the License, or (at your option) any\\n * later version.\\n *\\n * getImageList is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * getImageList; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\n * Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package migx\\n *\\/\\n\\/**\\n * getImageList\\n *\\n * display Items from outputvalue of TV with custom-TV-input-type MIGX or from other JSON-string for MODx Revolution \\n *\\n * @version 1.4\\n * @author Bruno Perner <b.perner@gmx.de>\\n * @copyright Copyright &copy; 2009-2011\\n * @license http:\\/\\/www.gnu.org\\/licenses\\/old-licenses\\/gpl-2.0.html GNU General Public License\\n * version 2 or (at your option) any later version.\\n * @package migx\\n *\\/\\n\\n\\/*example: <ul>[[!getImageList? &tvname=`myTV`&tpl=`@CODE:<li>[[+idx]]<img src=\\"[[+imageURL]]\\"\\/><p>[[+imageAlt]]<\\/p><\\/li>`]]<\\/ul>*\\/\\n\\/* get default properties *\\/\\n\\n\\n$tvname = $modx->getOption(\'tvname\', $scriptProperties, \'\');\\n$tpl = $modx->getOption(\'tpl\', $scriptProperties, \'\');\\n$limit = $modx->getOption(\'limit\', $scriptProperties, \'0\');\\n$offset = $modx->getOption(\'offset\', $scriptProperties, 0);\\n$totalVar = $modx->getOption(\'totalVar\', $scriptProperties, \'total\');\\n$randomize = $modx->getOption(\'randomize\', $scriptProperties, false);\\n$preselectLimit = $modx->getOption(\'preselectLimit\', $scriptProperties, 0); \\/\\/ when random preselect important images\\n$where = $modx->getOption(\'where\', $scriptProperties, \'\');\\n$where = !empty($where) ? $modx->fromJSON($where) : array();\\n$sort = $modx->getOption(\'sort\', $scriptProperties, \'\');\\n$sort = !empty($sort) ? $modx->fromJSON($sort) : array();\\n$toSeparatePlaceholders = $modx->getOption(\'toSeparatePlaceholders\', $scriptProperties, false);\\n$toPlaceholder = $modx->getOption(\'toPlaceholder\', $scriptProperties, false);\\n$outputSeparator = $modx->getOption(\'outputSeparator\', $scriptProperties, \'\');\\n$placeholdersKeyField = $modx->getOption(\'placeholdersKeyField\', $scriptProperties, \'MIGX_id\');\\n$toJsonPlaceholder = $modx->getOption(\'toJsonPlaceholder\', $scriptProperties, false);\\n$jsonVarKey = $modx->getOption(\'jsonVarKey\', $scriptProperties, \'migx_outputvalue\');\\n$outputvalue = $modx->getOption(\'value\', $scriptProperties, \'\');\\n$outputvalue = isset($_REQUEST[$jsonVarKey]) ? $_REQUEST[$jsonVarKey] : $outputvalue;\\n$docidVarKey = $modx->getOption(\'docidVarKey\', $scriptProperties, \'migx_docid\');\\n$docid = $modx->getOption(\'docid\', $scriptProperties, (isset($modx->resource) ? $modx->resource->get(\'id\') : 1));\\n$docid = isset($_REQUEST[$docidVarKey]) ? $_REQUEST[$docidVarKey] : $docid;\\n$processTVs = $modx->getOption(\'processTVs\', $scriptProperties, \'1\');\\n\\n$base_path = $modx->getOption(\'base_path\', null, MODX_BASE_PATH);\\n$base_url = $modx->getOption(\'base_url\', null, MODX_BASE_URL);\\n\\n$migx = $modx->getService(\'migx\', \'Migx\', $modx->getOption(\'migx.core_path\', null, $modx->getOption(\'core_path\') . \'components\\/migx\\/\') . \'model\\/migx\\/\', $scriptProperties);\\nif (!($migx instanceof Migx)) return \'\';\\n$migx->working_context = $modx->resource->get(\'context_key\');\\n\\n\\nif (!empty($tvname)) {\\n    if ($tv = $modx->getObject(\'modTemplateVar\', array(\'name\' => $tvname))) {\\n\\n        \\/*\\n        *   get inputProperties\\n        *\\/\\n\\n\\n        $properties = $tv->get(\'input_properties\');\\n        $properties = isset($properties[\'formtabs\']) ? $properties : $tv->getProperties();\\n\\n        $migx->config[\'configs\'] = $properties[\'configs\'];\\n        $migx->loadConfigs();\\n        \\/\\/ get tabs from file or migx-config-table\\n        $formtabs = $migx->getTabs();\\n        if (empty($formtabs)) {\\n            \\/\\/try to get formtabs and its fields from properties\\n            $formtabs = $modx->fromJSON($properties[\'formtabs\']);\\n        }\\n\\n        if (!empty($properties[\'basePath\'])) {\\n            if ($properties[\'autoResourceFolders\'] == \'true\') {\\n                $scriptProperties[\'base_path\'] = $base_path . $properties[\'basePath\'] . $docid . \'\\/\';\\n                $scriptProperties[\'base_url\'] = $base_url . $properties[\'basePath\'] . $docid . \'\\/\';\\n            } else {\\n                $scriptProperties[\'base_path\'] = $base_path . $properties[\'base_path\'];\\n                $scriptProperties[\'base_url\'] = $base_url . $properties[\'basePath\'];\\n            }\\n        }\\n        if ($jsonVarKey == \'migx_outputvalue\' && !empty($properties[\'jsonvarkey\'])) {\\n            $jsonVarKey = $properties[\'jsonvarkey\'];\\n            $outputvalue = isset($_REQUEST[$jsonVarKey]) ? $_REQUEST[$jsonVarKey] : $outputvalue;\\n        }\\n        $outputvalue = empty($outputvalue) ? $tv->renderOutput($docid) : $outputvalue;\\n        \\/*\\n        *   get inputTvs \\n        *\\/\\n        $inputTvs = array();\\n        if (is_array($formtabs)) {\\n\\n            \\/\\/multiple different Forms\\n            \\/\\/ Note: use same field-names and inputTVs in all forms\\n            $inputTvs = $migx->extractInputTvs($formtabs);\\n        }\\n\\n    }\\n    $migx->source = $tv->getSource($migx->working_context, false);\\n}\\n\\nif (empty($outputvalue)) {\\n    return \'\';\\n}\\n\\n\\/\\/echo $outputvalue.\'<br\\/><br\\/>\';\\n\\n\\n$items = $modx->fromJSON($outputvalue);\\n$modx->setPlaceholder($totalVar, count($items));\\n\\n\\/\\/ where filter\\nif (is_array($where) && count($where) > 0) {\\n    $items = $migx->filterItems($where, $items);\\n}\\n\\n\\/\\/ sort items\\nif (is_array($sort) && count($sort) > 0) {\\n    $items = $migx->sortDbResult($items, $sort);\\n}\\n\\n\\nif (count($items) > 0) {\\n    $items = $offset > 0 ? array_slice($items, $offset) : $items;\\n    $count = count($items);\\n    $limit = $limit == 0 || $limit > $count ? $count : $limit;\\n    $preselectLimit = $preselectLimit > $count ? $count : $preselectLimit;\\n    \\/\\/preselect important items\\n    $preitems = array();\\n    if ($randomize && $preselectLimit > 0) {\\n        for ($i = 0; $i < $preselectLimit; $i++) {\\n            $preitems[] = $items[$i];\\n            unset($items[$i]);\\n        }\\n        $limit = $limit - count($preitems);\\n    }\\n\\n    \\/\\/shuffle items\\n    if ($randomize) {\\n        shuffle($items);\\n    }\\n\\n    \\/\\/limit items\\n    $tempitems = array();\\n    for ($i = 0; $i < $limit; $i++) {\\n        $tempitems[] = $items[$i];\\n    }\\n    $items = $tempitems;\\n\\n    \\/\\/add preselected items and schuffle again\\n    if ($randomize && $preselectLimit > 0) {\\n        $items = array_merge($preitems, $items);\\n        shuffle($items);\\n    }\\n\\n    $properties = array();\\n    foreach ($scriptProperties as $property => $value) {\\n        $properties[\'property.\' . $property] = $value;\\n    }\\n\\n    $idx = 0;\\n    $output = array();\\n    foreach ($items as $key => $item) {\\n\\n        $fields = array();\\n        foreach ($item as $field => $value) {\\n            $value = is_array($value) ? implode(\'||\', $value) : $value; \\/\\/handle arrays (checkboxes, multiselects)\\n            if ($processTVs && isset($inputTvs[$field])) {\\n                if ($tv = $modx->getObject(\'modTemplateVar\', array(\'name\' => $inputTvs[$field][\'inputTV\']))) {\\n\\n                } else {\\n                    $tv = $modx->newObject(\'modTemplateVar\');\\n                    $tv->set(\'type\',$inputTvs[$field][\'inputTVtype\']);\\n                }\\n                $inputTV = $inputTvs[$field];\\n  \\n                $mTypes = $modx->getOption(\'manipulatable_url_tv_output_types\', null, \'image,file\');\\n                \\/\\/don\'t manipulate any urls here\\n                $modx->setOption(\'manipulatable_url_tv_output_types\', \'\');\\n                $tv->set(\'default_text\', $value);\\n                $value = $tv->renderOutput($docid);\\n                \\/\\/set option back\\n                $modx->setOption(\'manipulatable_url_tv_output_types\', $mTypes);\\n                \\/\\/now manipulate urls\\n                if ($mediasource = $migx->getFieldSource($inputTV, $tv)) {\\n                     $mTypes = explode(\',\', $mTypes);\\n                    if (!empty($value) && in_array($tv->get(\'type\'), $mTypes)) {\\n                        \\/\\/$value = $mediasource->prepareOutputUrl($value);\\n                        $value = str_replace(\'\\/.\\/\', \'\\/\', $mediasource->prepareOutputUrl($value));\\n                    }\\n                }\\n\\n            }\\n            $fields[$field] = $value;\\n\\n        }\\n        if ($toJsonPlaceholder) {\\n            $output[] = $fields;\\n        } else {\\n            $fields[\'_alt\'] = $idx % 2;\\n            $idx++;\\n            $fields[\'_first\'] = $idx == 1 ? true : \'\';\\n            $fields[\'_last\'] = $idx == $limit ? true : \'\';\\n            $fields[\'idx\'] = $idx;\\n            $rowtpl = $tpl;\\n            \\/\\/get changing tpls from field\\n            if (substr($tpl, 0, 7) == \\"@FIELD:\\") {\\n                $tplField = substr($tpl, 7);\\n                $rowtpl = $fields[$tplField];\\n            }\\n\\n            if (!isset($template[$rowtpl])) {\\n                if (substr($rowtpl, 0, 6) == \\"@FILE:\\") {\\n                    $template[$rowtpl] = file_get_contents($modx->config[\'base_path\'] . substr($rowtpl, 6));\\n                } elseif (substr($rowtpl, 0, 6) == \\"@CODE:\\") {\\n                    $template[$rowtpl] = substr($tpl, 6);\\n                } elseif ($chunk = $modx->getObject(\'modChunk\', array(\'name\' => $rowtpl), true)) {\\n                    $template[$rowtpl] = $chunk->getContent();\\n                } else {\\n                    $template[$rowtpl] = false;\\n                }\\n            }\\n\\n            $fields = array_merge($fields, $properties);\\n\\n            if ($template[$rowtpl]) {\\n                $chunk = $modx->newObject(\'modChunk\');\\n                $chunk->setCacheable(false);\\n                $chunk->setContent($template[$rowtpl]);\\n                if (!empty($placeholdersKeyField) && isset($fields[$placeholdersKeyField])) {\\n                    $output[$fields[$placeholdersKeyField]] = $chunk->process($fields);\\n                } else {\\n                    $output[] = $chunk->process($fields);\\n                }\\n            } else {\\n                if (!empty($placeholdersKeyField)) {\\n                    $output[$fields[$placeholdersKeyField]] = \'<pre>\' . print_r($fields, 1) . \'<\\/pre>\';\\n                } else {\\n                    $output[] = \'<pre>\' . print_r($fields, 1) . \'<\\/pre>\';\\n                }\\n            }\\n        }\\n\\n\\n    }\\n}\\n\\nif ($toJsonPlaceholder) {\\n    $modx->setPlaceholder($toJsonPlaceholder, $modx->toJson($output));\\n    return \'\';\\n}\\n\\nif (!empty($toSeparatePlaceholders)) {\\n    $modx->toPlaceholders($output, $toSeparatePlaceholders);\\n    return \'\';\\n}\\n\\/*\\nif (!empty($outerTpl))\\n$o = parseTpl($outerTpl, array(\'output\'=>implode($outputSeparator, $output)));\\nelse \\n*\\/\\nif (is_array($output)) {\\n    $o = implode($outputSeparator, $output);\\n} else {\\n    $o = $output;\\n}\\n\\nif (!empty($toPlaceholder)) {\\n    $modx->setPlaceholder($toPlaceholder, $o);\\n    return \'\';\\n}\\n\\nreturn $o;"}',
        'guid' => 'a35440d687a40c25bf98c13b29605764',
        'native_key' => 1,
        'signature' => '16734e3633a1e4124130cffc212730c1',
      ),
      '8dd1d7c1b0e9378c7723e273996506ae' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":2,"source":0,"property_preprocess":0,"name":"migxGetRelations","description":"","editor_type":0,"category":1,"cache_type":0,"snippet":"$id = $modx->getOption(\'id\', $scriptProperties, $modx->resource->get(\'id\'));\\n$toPlaceholder = $modx->getOption(\'toPlaceholder\', $scriptProperties, \'\');\\n$element = $modx->getOption(\'element\', $scriptProperties, \'getResources\');\\n$outputSeparator = $modx->getOption(\'outputSeparator\', $scriptProperties, \',\');\\n$sourceWhere = $modx->getOption(\'sourceWhere\', $scriptProperties, \'\');\\n$ignoreRelationIfEmpty = $modx->getOption(\'ignoreRelationIfEmpty\', $scriptProperties, false);\\n$inheritFromParents = $modx->getOption(\'inheritFromParents\', $scriptProperties, false);\\n$parentIDs = $inheritFromParents ? array_merge(array($id), $modx->getParentIds($id)) : array($id);\\n\\n$packageName = \'resourcerelations\';\\n\\n$packagepath = $modx->getOption(\'core_path\') . \'components\\/\' . $packageName . \'\\/\';\\n$modelpath = $packagepath . \'model\\/\';\\n\\n$modx->addPackage($packageName, $modelpath, $prefix);\\n$classname = \'rrResourceRelation\';\\n$output = \'\';\\n\\nforeach ($parentIDs as $id) {\\n    if (!empty($id)) {\\n        $output = \'\';\\n                \\n        $c = $modx->newQuery($classname, array(\'target_id\' => $id, \'published\' => \'1\'));\\n        $c->select($modx->getSelectColumns($classname, $classname));\\n\\n        if (!empty($sourceWhere)) {\\n            $sourceWhere_ar = $modx->fromJson($sourceWhere);\\n            if (is_array($sourceWhere_ar)) {\\n                $where = array();\\n                foreach ($sourceWhere_ar as $key => $value) {\\n                    $where[\'Source.\' . $key] = $value;\\n                }\\n                $joinclass = \'modResource\';\\n                $joinalias = \'Source\';\\n                $selectfields = \'id\';\\n                $selectfields = !empty($selectfields) ? explode(\',\', $selectfields) : null;\\n                $c->leftjoin($joinclass, $joinalias);\\n                $c->select($modx->getSelectColumns($joinclass, $joinalias, $joinalias . \'_\', $selectfields));\\n                $c->where($where);\\n            }\\n        }\\n\\n        \\/\\/$c->prepare(); echo $c->toSql();\\n        if ($c->prepare() && $c->stmt->execute()) {\\n            $collection = $c->stmt->fetchAll(PDO::FETCH_ASSOC);\\n        }\\n        \\n        foreach ($collection as $row) {\\n            $ids[] = $row[\'source_id\'];\\n        }\\n        $output = implode($outputSeparator, $ids);\\n    }\\n    if (!empty($output)){\\n        break;\\n    }\\n}\\n\\n\\nif (!empty($element)) {\\n    if (empty($output) && $ignoreRelationIfEmpty) {\\n        return $modx->runSnippet($element, $scriptProperties);\\n    } else {\\n        $scriptProperties[\'resources\'] = $output;\\n        $scriptProperties[\'parents\'] = \'9999999\';\\n        return $modx->runSnippet($element, $scriptProperties);\\n    }\\n\\n\\n}\\n\\nif (!empty($toPlaceholder)) {\\n    $modx->setPlaceholder($toPlaceholder, $output);\\n    return \'\';\\n}\\n\\nreturn $output;","locked":0,"properties":null,"moduleguid":"","static":0,"static_file":"","content":"$id = $modx->getOption(\'id\', $scriptProperties, $modx->resource->get(\'id\'));\\n$toPlaceholder = $modx->getOption(\'toPlaceholder\', $scriptProperties, \'\');\\n$element = $modx->getOption(\'element\', $scriptProperties, \'getResources\');\\n$outputSeparator = $modx->getOption(\'outputSeparator\', $scriptProperties, \',\');\\n$sourceWhere = $modx->getOption(\'sourceWhere\', $scriptProperties, \'\');\\n$ignoreRelationIfEmpty = $modx->getOption(\'ignoreRelationIfEmpty\', $scriptProperties, false);\\n$inheritFromParents = $modx->getOption(\'inheritFromParents\', $scriptProperties, false);\\n$parentIDs = $inheritFromParents ? array_merge(array($id), $modx->getParentIds($id)) : array($id);\\n\\n$packageName = \'resourcerelations\';\\n\\n$packagepath = $modx->getOption(\'core_path\') . \'components\\/\' . $packageName . \'\\/\';\\n$modelpath = $packagepath . \'model\\/\';\\n\\n$modx->addPackage($packageName, $modelpath, $prefix);\\n$classname = \'rrResourceRelation\';\\n$output = \'\';\\n\\nforeach ($parentIDs as $id) {\\n    if (!empty($id)) {\\n        $output = \'\';\\n                \\n        $c = $modx->newQuery($classname, array(\'target_id\' => $id, \'published\' => \'1\'));\\n        $c->select($modx->getSelectColumns($classname, $classname));\\n\\n        if (!empty($sourceWhere)) {\\n            $sourceWhere_ar = $modx->fromJson($sourceWhere);\\n            if (is_array($sourceWhere_ar)) {\\n                $where = array();\\n                foreach ($sourceWhere_ar as $key => $value) {\\n                    $where[\'Source.\' . $key] = $value;\\n                }\\n                $joinclass = \'modResource\';\\n                $joinalias = \'Source\';\\n                $selectfields = \'id\';\\n                $selectfields = !empty($selectfields) ? explode(\',\', $selectfields) : null;\\n                $c->leftjoin($joinclass, $joinalias);\\n                $c->select($modx->getSelectColumns($joinclass, $joinalias, $joinalias . \'_\', $selectfields));\\n                $c->where($where);\\n            }\\n        }\\n\\n        \\/\\/$c->prepare(); echo $c->toSql();\\n        if ($c->prepare() && $c->stmt->execute()) {\\n            $collection = $c->stmt->fetchAll(PDO::FETCH_ASSOC);\\n        }\\n        \\n        foreach ($collection as $row) {\\n            $ids[] = $row[\'source_id\'];\\n        }\\n        $output = implode($outputSeparator, $ids);\\n    }\\n    if (!empty($output)){\\n        break;\\n    }\\n}\\n\\n\\nif (!empty($element)) {\\n    if (empty($output) && $ignoreRelationIfEmpty) {\\n        return $modx->runSnippet($element, $scriptProperties);\\n    } else {\\n        $scriptProperties[\'resources\'] = $output;\\n        $scriptProperties[\'parents\'] = \'9999999\';\\n        return $modx->runSnippet($element, $scriptProperties);\\n    }\\n\\n\\n}\\n\\nif (!empty($toPlaceholder)) {\\n    $modx->setPlaceholder($toPlaceholder, $output);\\n    return \'\';\\n}\\n\\nreturn $output;"}',
        'guid' => 'b6f4d92906511bde7f399eb86d1e46e7',
        'native_key' => 2,
        'signature' => '82aa600ebda7e254dc441fb6ee60e8b3',
      ),
      '5b29638534e6a3c7aa5fe066c034a0d6' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":4,"source":0,"property_preprocess":0,"name":"migx","description":"","editor_type":0,"category":1,"cache_type":0,"snippet":"$tvname = $modx->getOption(\'tvname\', $scriptProperties, \'\');\\n$tpl = $modx->getOption(\'tpl\', $scriptProperties, \'\');\\n$limit = $modx->getOption(\'limit\', $scriptProperties, \'0\');\\n$offset = $modx->getOption(\'offset\', $scriptProperties, 0);\\n$totalVar = $modx->getOption(\'totalVar\', $scriptProperties, \'total\');\\n$randomize = $modx->getOption(\'randomize\', $scriptProperties, false);\\n$preselectLimit = $modx->getOption(\'preselectLimit\', $scriptProperties, 0); \\/\\/ when random preselect important images\\n$where = $modx->getOption(\'where\', $scriptProperties, \'\');\\n$where = !empty($where) ? $modx->fromJSON($where) : array();\\n$sortConfig = $modx->getOption(\'sortConfig\', $scriptProperties, \'\');\\n$sortConfig = !empty($sortConfig) ? $modx->fromJSON($sortConfig) : array();\\n$configs = $modx->getOption(\'configs\', $scriptProperties, \'\');\\n$configs = !empty($configs) ? explode(\',\',$configs):array();\\n$toSeparatePlaceholders = $modx->getOption(\'toSeparatePlaceholders\', $scriptProperties, false);\\n$toPlaceholder = $modx->getOption(\'toPlaceholder\', $scriptProperties, false);\\n$outputSeparator = $modx->getOption(\'outputSeparator\', $scriptProperties, \'\');\\n\\/\\/$placeholdersKeyField = $modx->getOption(\'placeholdersKeyField\', $scriptProperties, \'MIGX_id\');\\n$placeholdersKeyField = $modx->getOption(\'placeholdersKeyField\', $scriptProperties, \'id\');\\n$toJsonPlaceholder = $modx->getOption(\'toJsonPlaceholder\', $scriptProperties, false);\\n$jsonVarKey = $modx->getOption(\'jsonVarKey\', $scriptProperties, \'migx_outputvalue\');\\n$outputvalue = $modx->getOption(\'value\', $scriptProperties, \'\');\\n$outputvalue = isset($_REQUEST[$jsonVarKey]) ? $_REQUEST[$jsonVarKey] : $outputvalue;\\n$docidVarKey = $modx->getOption(\'docidVarKey\', $scriptProperties, \'migx_docid\');\\n$docid = $modx->getOption(\'docid\', $scriptProperties, (isset($modx->resource) ? $modx->resource->get(\'id\') : 1));\\n$docid = isset($_REQUEST[$docidVarKey]) ? $_REQUEST[$docidVarKey] : $docid;\\n$processTVs = $modx->getOption(\'processTVs\', $scriptProperties, \'1\');\\n\\n$base_path = $modx->getOption(\'base_path\', null, MODX_BASE_PATH);\\n$base_url = $modx->getOption(\'base_url\', null, MODX_BASE_URL);\\n\\n$migx = $modx->getService(\'migx\', \'Migx\', $modx->getOption(\'migx.core_path\', null, $modx->getOption(\'core_path\') . \'components\\/migx\\/\') . \'model\\/migx\\/\', $scriptProperties);\\nif (!($migx instanceof Migx))\\n    return \'\';\\n\\/\\/$modx->migx = &$migx;\\n$defaultcontext = \'web\';\\n$migx->working_context = isset($modx->resource) ? $modx->resource->get(\'context_key\') : $defaultcontext;\\n\\nif (!empty($tvname))\\n{\\n    if ($tv = $modx->getObject(\'modTemplateVar\', array(\'name\' => $tvname)))\\n    {\\n\\n        \\/*\\n        *   get inputProperties\\n        *\\/\\n\\n\\n        $properties = $tv->get(\'input_properties\');\\n        $properties = isset($properties[\'configs\']) ? $properties : $tv->getProperties();\\n        $cfgs = $modx->getOption(\'configs\',$properties,\'\');\\n        if (!empty($cfgs)){\\n            $cfgs = explode(\',\',$cfgs);\\n            $configs = array_merge($configs,$cfgs);\\n           \\n        }\\n        \\n    }\\n}\\n\\n\\n\\n\\/\\/$migx->config[\'configs\'] = implode(\',\',$configs);\\n$migx->loadConfigs(false,true,array(\'configs\'=>implode(\',\',$configs)));\\n$migx->customconfigs = array_merge($migx->customconfigs,$scriptProperties);\\n\\n\\n\\n\\/\\/ get tabs from file or migx-config-table\\n$formtabs = $migx->getTabs();\\nif (empty($formtabs))\\n{\\n    \\/\\/try to get formtabs and its fields from properties\\n    $formtabs = $modx->fromJSON($properties[\'formtabs\']);\\n}\\n\\nif ($jsonVarKey == \'migx_outputvalue\' && !empty($properties[\'jsonvarkey\']))\\n{\\n    $jsonVarKey = $properties[\'jsonvarkey\'];\\n    $outputvalue = isset($_REQUEST[$jsonVarKey]) ? $_REQUEST[$jsonVarKey] : $outputvalue;\\n}\\n\\n$outputvalue = $tv && empty($outputvalue) ? $tv->renderOutput($docid) : $outputvalue;\\n\\/*\\n*   get inputTvs \\n*\\/\\n$inputTvs = array();\\nif (is_array($formtabs))\\n{\\n\\n    \\/\\/multiple different Forms\\n    \\/\\/ Note: use same field-names and inputTVs in all forms\\n    $inputTvs = $migx->extractInputTvs($formtabs);\\n}\\n\\nif ($tv)\\n{\\n    $migx->source = $tv->getSource($migx->working_context, false);\\n}\\n\\n\\/\\/$task = $modx->migx->getTask();\\n$filename = \'getlist.php\';\\n$processorspath = $migx->config[\'processorsPath\'] . \'mgr\\/\';\\n$filenames = array();\\n$scriptProperties[\'start\'] = $modx->getOption(\'offset\', $scriptProperties, 0);\\nif ($processor_file = $migx->findProcessor($processorspath, $filename, $filenames))\\n{\\n    include ($processor_file);\\n    \\/\\/todo: add getlist-processor for default-MIGX-TV\\n}\\n\\n$items = isset($rows) && is_array($rows) ? $rows : array();\\n$modx->setPlaceholder($totalVar, isset($count) ? $count : 0);\\n\\n$properties = array();\\nforeach ($scriptProperties as $property => $value)\\n{\\n    $properties[\'property.\' . $property] = $value;\\n}\\n\\n$idx = 0;\\n$output = array();\\nforeach ($items as $key => $item)\\n{\\n\\n    $fields = array();\\n    foreach ($item as $field => $value)\\n    {\\n        $value = is_array($value) ? implode(\'||\', $value) : $value; \\/\\/handle arrays (checkboxes, multiselects)\\n        if ($processTVs && isset($inputTvs[$field]))\\n        {\\n            if ($tv = $modx->getObject(\'modTemplateVar\', array(\'name\' => $inputTvs[$field][\'inputTV\'])))\\n            {\\n\\n            } else\\n            {\\n                $tv = $modx->newObject(\'modTemplateVar\');\\n                $tv->set(\'type\', $inputTvs[$field][\'inputTVtype\']);\\n            }\\n            $inputTV = $inputTvs[$field];\\n\\n            $mTypes = $modx->getOption(\'manipulatable_url_tv_output_types\', null, \'image,file\');\\n            \\/\\/don\'t manipulate any urls here\\n            $modx->setOption(\'manipulatable_url_tv_output_types\', \'\');\\n            $tv->set(\'default_text\', $value);\\n            $value = $tv->renderOutput($docid);\\n            \\/\\/set option back\\n            $modx->setOption(\'manipulatable_url_tv_output_types\', $mTypes);\\n            \\/\\/now manipulate urls\\n            if ($mediasource = $migx->getFieldSource($inputTV, $tv))\\n            {\\n                $mTypes = explode(\',\', $mTypes);\\n                if (!empty($value) && in_array($tv->get(\'type\'), $mTypes))\\n                {\\n                    \\/\\/$value = $mediasource->prepareOutputUrl($value);\\n                    $value = str_replace(\'\\/.\\/\', \'\\/\', $mediasource->prepareOutputUrl($value));\\n                }\\n            }\\n\\n        }\\n        $fields[$field] = $value;\\n\\n    }\\n    if ($toJsonPlaceholder)\\n    {\\n        $output[] = $fields;\\n    } else\\n    {\\n        $fields[\'_alt\'] = $idx % 2;\\n        $idx++;\\n        $fields[\'_first\'] = $idx == 1 ? true : \'\';\\n        $fields[\'_last\'] = $idx == $limit ? true : \'\';\\n        $fields[\'idx\'] = $idx;\\n        $rowtpl = $tpl;\\n        \\/\\/get changing tpls from field\\n        if (substr($tpl, 0, 7) == \\"@FIELD:\\")\\n        {\\n            $tplField = substr($tpl, 7);\\n            $rowtpl = $fields[$tplField];\\n        }\\n\\n        if (!isset($template[$rowtpl]))\\n        {\\n            if (substr($rowtpl, 0, 6) == \\"@FILE:\\")\\n            {\\n                $template[$rowtpl] = file_get_contents($modx->config[\'base_path\'] . substr($rowtpl, 6));\\n            } elseif (substr($rowtpl, 0, 6) == \\"@CODE:\\")\\n            {\\n                $template[$rowtpl] = substr($tpl, 6);\\n            } elseif ($chunk = $modx->getObject(\'modChunk\', array(\'name\' => $rowtpl), true))\\n            {\\n                $template[$rowtpl] = $chunk->getContent();\\n            } else\\n            {\\n                $template[$rowtpl] = false;\\n            }\\n        }\\n\\n        $fields = array_merge($fields, $properties);\\n\\n        if ($template[$rowtpl])\\n        {\\n            $chunk = $modx->newObject(\'modChunk\');\\n            $chunk->setCacheable(false);\\n            $chunk->setContent($template[$rowtpl]);\\n            if (!empty($placeholdersKeyField) && isset($fields[$placeholdersKeyField]))\\n            {\\n                $output[$fields[$placeholdersKeyField]] = $chunk->process($fields);\\n            } else\\n            {\\n                $output[] = $chunk->process($fields);\\n            }\\n        } else\\n        {\\n            if (!empty($placeholdersKeyField))\\n            {\\n                $output[$fields[$placeholdersKeyField]] = \'<pre>\' . print_r($fields, 1) . \'<\\/pre>\';\\n            } else\\n            {\\n                $output[] = \'<pre>\' . print_r($fields, 1) . \'<\\/pre>\';\\n            }\\n        }\\n    }\\n\\n\\n}\\n\\n\\nif ($toJsonPlaceholder)\\n{\\n    $modx->setPlaceholder($toJsonPlaceholder, $modx->toJson($output));\\n    return \'\';\\n}\\n\\nif (!empty($toSeparatePlaceholders))\\n{\\n    $modx->toPlaceholders($output, $toSeparatePlaceholders);\\n    return \'\';\\n}\\n\\/*\\nif (!empty($outerTpl))\\n$o = parseTpl($outerTpl, array(\'output\'=>implode($outputSeparator, $output)));\\nelse \\n*\\/\\nif (is_array($output))\\n{\\n    $o = implode($outputSeparator, $output);\\n} else\\n{\\n    $o = $output;\\n}\\n\\nif (!empty($toPlaceholder))\\n{\\n    $modx->setPlaceholder($toPlaceholder, $o);\\n    return \'\';\\n}\\n\\nreturn $o;","locked":0,"properties":null,"moduleguid":"","static":0,"static_file":"","content":"$tvname = $modx->getOption(\'tvname\', $scriptProperties, \'\');\\n$tpl = $modx->getOption(\'tpl\', $scriptProperties, \'\');\\n$limit = $modx->getOption(\'limit\', $scriptProperties, \'0\');\\n$offset = $modx->getOption(\'offset\', $scriptProperties, 0);\\n$totalVar = $modx->getOption(\'totalVar\', $scriptProperties, \'total\');\\n$randomize = $modx->getOption(\'randomize\', $scriptProperties, false);\\n$preselectLimit = $modx->getOption(\'preselectLimit\', $scriptProperties, 0); \\/\\/ when random preselect important images\\n$where = $modx->getOption(\'where\', $scriptProperties, \'\');\\n$where = !empty($where) ? $modx->fromJSON($where) : array();\\n$sortConfig = $modx->getOption(\'sortConfig\', $scriptProperties, \'\');\\n$sortConfig = !empty($sortConfig) ? $modx->fromJSON($sortConfig) : array();\\n$configs = $modx->getOption(\'configs\', $scriptProperties, \'\');\\n$configs = !empty($configs) ? explode(\',\',$configs):array();\\n$toSeparatePlaceholders = $modx->getOption(\'toSeparatePlaceholders\', $scriptProperties, false);\\n$toPlaceholder = $modx->getOption(\'toPlaceholder\', $scriptProperties, false);\\n$outputSeparator = $modx->getOption(\'outputSeparator\', $scriptProperties, \'\');\\n\\/\\/$placeholdersKeyField = $modx->getOption(\'placeholdersKeyField\', $scriptProperties, \'MIGX_id\');\\n$placeholdersKeyField = $modx->getOption(\'placeholdersKeyField\', $scriptProperties, \'id\');\\n$toJsonPlaceholder = $modx->getOption(\'toJsonPlaceholder\', $scriptProperties, false);\\n$jsonVarKey = $modx->getOption(\'jsonVarKey\', $scriptProperties, \'migx_outputvalue\');\\n$outputvalue = $modx->getOption(\'value\', $scriptProperties, \'\');\\n$outputvalue = isset($_REQUEST[$jsonVarKey]) ? $_REQUEST[$jsonVarKey] : $outputvalue;\\n$docidVarKey = $modx->getOption(\'docidVarKey\', $scriptProperties, \'migx_docid\');\\n$docid = $modx->getOption(\'docid\', $scriptProperties, (isset($modx->resource) ? $modx->resource->get(\'id\') : 1));\\n$docid = isset($_REQUEST[$docidVarKey]) ? $_REQUEST[$docidVarKey] : $docid;\\n$processTVs = $modx->getOption(\'processTVs\', $scriptProperties, \'1\');\\n\\n$base_path = $modx->getOption(\'base_path\', null, MODX_BASE_PATH);\\n$base_url = $modx->getOption(\'base_url\', null, MODX_BASE_URL);\\n\\n$migx = $modx->getService(\'migx\', \'Migx\', $modx->getOption(\'migx.core_path\', null, $modx->getOption(\'core_path\') . \'components\\/migx\\/\') . \'model\\/migx\\/\', $scriptProperties);\\nif (!($migx instanceof Migx))\\n    return \'\';\\n\\/\\/$modx->migx = &$migx;\\n$defaultcontext = \'web\';\\n$migx->working_context = isset($modx->resource) ? $modx->resource->get(\'context_key\') : $defaultcontext;\\n\\nif (!empty($tvname))\\n{\\n    if ($tv = $modx->getObject(\'modTemplateVar\', array(\'name\' => $tvname)))\\n    {\\n\\n        \\/*\\n        *   get inputProperties\\n        *\\/\\n\\n\\n        $properties = $tv->get(\'input_properties\');\\n        $properties = isset($properties[\'configs\']) ? $properties : $tv->getProperties();\\n        $cfgs = $modx->getOption(\'configs\',$properties,\'\');\\n        if (!empty($cfgs)){\\n            $cfgs = explode(\',\',$cfgs);\\n            $configs = array_merge($configs,$cfgs);\\n           \\n        }\\n        \\n    }\\n}\\n\\n\\n\\n\\/\\/$migx->config[\'configs\'] = implode(\',\',$configs);\\n$migx->loadConfigs(false,true,array(\'configs\'=>implode(\',\',$configs)));\\n$migx->customconfigs = array_merge($migx->customconfigs,$scriptProperties);\\n\\n\\n\\n\\/\\/ get tabs from file or migx-config-table\\n$formtabs = $migx->getTabs();\\nif (empty($formtabs))\\n{\\n    \\/\\/try to get formtabs and its fields from properties\\n    $formtabs = $modx->fromJSON($properties[\'formtabs\']);\\n}\\n\\nif ($jsonVarKey == \'migx_outputvalue\' && !empty($properties[\'jsonvarkey\']))\\n{\\n    $jsonVarKey = $properties[\'jsonvarkey\'];\\n    $outputvalue = isset($_REQUEST[$jsonVarKey]) ? $_REQUEST[$jsonVarKey] : $outputvalue;\\n}\\n\\n$outputvalue = $tv && empty($outputvalue) ? $tv->renderOutput($docid) : $outputvalue;\\n\\/*\\n*   get inputTvs \\n*\\/\\n$inputTvs = array();\\nif (is_array($formtabs))\\n{\\n\\n    \\/\\/multiple different Forms\\n    \\/\\/ Note: use same field-names and inputTVs in all forms\\n    $inputTvs = $migx->extractInputTvs($formtabs);\\n}\\n\\nif ($tv)\\n{\\n    $migx->source = $tv->getSource($migx->working_context, false);\\n}\\n\\n\\/\\/$task = $modx->migx->getTask();\\n$filename = \'getlist.php\';\\n$processorspath = $migx->config[\'processorsPath\'] . \'mgr\\/\';\\n$filenames = array();\\n$scriptProperties[\'start\'] = $modx->getOption(\'offset\', $scriptProperties, 0);\\nif ($processor_file = $migx->findProcessor($processorspath, $filename, $filenames))\\n{\\n    include ($processor_file);\\n    \\/\\/todo: add getlist-processor for default-MIGX-TV\\n}\\n\\n$items = isset($rows) && is_array($rows) ? $rows : array();\\n$modx->setPlaceholder($totalVar, isset($count) ? $count : 0);\\n\\n$properties = array();\\nforeach ($scriptProperties as $property => $value)\\n{\\n    $properties[\'property.\' . $property] = $value;\\n}\\n\\n$idx = 0;\\n$output = array();\\nforeach ($items as $key => $item)\\n{\\n\\n    $fields = array();\\n    foreach ($item as $field => $value)\\n    {\\n        $value = is_array($value) ? implode(\'||\', $value) : $value; \\/\\/handle arrays (checkboxes, multiselects)\\n        if ($processTVs && isset($inputTvs[$field]))\\n        {\\n            if ($tv = $modx->getObject(\'modTemplateVar\', array(\'name\' => $inputTvs[$field][\'inputTV\'])))\\n            {\\n\\n            } else\\n            {\\n                $tv = $modx->newObject(\'modTemplateVar\');\\n                $tv->set(\'type\', $inputTvs[$field][\'inputTVtype\']);\\n            }\\n            $inputTV = $inputTvs[$field];\\n\\n            $mTypes = $modx->getOption(\'manipulatable_url_tv_output_types\', null, \'image,file\');\\n            \\/\\/don\'t manipulate any urls here\\n            $modx->setOption(\'manipulatable_url_tv_output_types\', \'\');\\n            $tv->set(\'default_text\', $value);\\n            $value = $tv->renderOutput($docid);\\n            \\/\\/set option back\\n            $modx->setOption(\'manipulatable_url_tv_output_types\', $mTypes);\\n            \\/\\/now manipulate urls\\n            if ($mediasource = $migx->getFieldSource($inputTV, $tv))\\n            {\\n                $mTypes = explode(\',\', $mTypes);\\n                if (!empty($value) && in_array($tv->get(\'type\'), $mTypes))\\n                {\\n                    \\/\\/$value = $mediasource->prepareOutputUrl($value);\\n                    $value = str_replace(\'\\/.\\/\', \'\\/\', $mediasource->prepareOutputUrl($value));\\n                }\\n            }\\n\\n        }\\n        $fields[$field] = $value;\\n\\n    }\\n    if ($toJsonPlaceholder)\\n    {\\n        $output[] = $fields;\\n    } else\\n    {\\n        $fields[\'_alt\'] = $idx % 2;\\n        $idx++;\\n        $fields[\'_first\'] = $idx == 1 ? true : \'\';\\n        $fields[\'_last\'] = $idx == $limit ? true : \'\';\\n        $fields[\'idx\'] = $idx;\\n        $rowtpl = $tpl;\\n        \\/\\/get changing tpls from field\\n        if (substr($tpl, 0, 7) == \\"@FIELD:\\")\\n        {\\n            $tplField = substr($tpl, 7);\\n            $rowtpl = $fields[$tplField];\\n        }\\n\\n        if (!isset($template[$rowtpl]))\\n        {\\n            if (substr($rowtpl, 0, 6) == \\"@FILE:\\")\\n            {\\n                $template[$rowtpl] = file_get_contents($modx->config[\'base_path\'] . substr($rowtpl, 6));\\n            } elseif (substr($rowtpl, 0, 6) == \\"@CODE:\\")\\n            {\\n                $template[$rowtpl] = substr($tpl, 6);\\n            } elseif ($chunk = $modx->getObject(\'modChunk\', array(\'name\' => $rowtpl), true))\\n            {\\n                $template[$rowtpl] = $chunk->getContent();\\n            } else\\n            {\\n                $template[$rowtpl] = false;\\n            }\\n        }\\n\\n        $fields = array_merge($fields, $properties);\\n\\n        if ($template[$rowtpl])\\n        {\\n            $chunk = $modx->newObject(\'modChunk\');\\n            $chunk->setCacheable(false);\\n            $chunk->setContent($template[$rowtpl]);\\n            if (!empty($placeholdersKeyField) && isset($fields[$placeholdersKeyField]))\\n            {\\n                $output[$fields[$placeholdersKeyField]] = $chunk->process($fields);\\n            } else\\n            {\\n                $output[] = $chunk->process($fields);\\n            }\\n        } else\\n        {\\n            if (!empty($placeholdersKeyField))\\n            {\\n                $output[$fields[$placeholdersKeyField]] = \'<pre>\' . print_r($fields, 1) . \'<\\/pre>\';\\n            } else\\n            {\\n                $output[] = \'<pre>\' . print_r($fields, 1) . \'<\\/pre>\';\\n            }\\n        }\\n    }\\n\\n\\n}\\n\\n\\nif ($toJsonPlaceholder)\\n{\\n    $modx->setPlaceholder($toJsonPlaceholder, $modx->toJson($output));\\n    return \'\';\\n}\\n\\nif (!empty($toSeparatePlaceholders))\\n{\\n    $modx->toPlaceholders($output, $toSeparatePlaceholders);\\n    return \'\';\\n}\\n\\/*\\nif (!empty($outerTpl))\\n$o = parseTpl($outerTpl, array(\'output\'=>implode($outputSeparator, $output)));\\nelse \\n*\\/\\nif (is_array($output))\\n{\\n    $o = implode($outputSeparator, $output);\\n} else\\n{\\n    $o = $output;\\n}\\n\\nif (!empty($toPlaceholder))\\n{\\n    $modx->setPlaceholder($toPlaceholder, $o);\\n    return \'\';\\n}\\n\\nreturn $o;"}',
        'guid' => 'f9a016b8411554cae16ccda70bbd3b8d',
        'native_key' => 4,
        'signature' => 'a419a5866664f7ae54b5d76403869f0c',
      ),
      '9cd15ffb40e31e001c2b48300c085736' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":7,"source":0,"property_preprocess":0,"name":"migxLoopCollection","description":"","editor_type":0,"category":1,"cache_type":0,"snippet":"$tpl = $modx->getOption(\'tpl\', $scriptProperties, \'\');\\n$limit = $modx->getOption(\'limit\', $scriptProperties, \'0\');\\n$offset = $modx->getOption(\'offset\', $scriptProperties, 0);\\n$totalVar = $modx->getOption(\'totalVar\', $scriptProperties, \'total\');\\n\\n$where = $modx->getOption(\'where\', $scriptProperties, \'\');\\n$where = !empty($where) ? $modx->fromJSON($where) : array();\\n$queries = $modx->getOption(\'queries\', $scriptProperties, \'\');\\n$queries = !empty($queries) ? $modx->fromJSON($queries) : array();\\n$sortConfig = $modx->getOption(\'sortConfig\', $scriptProperties, \'\');\\n$sortConfig = !empty($sortConfig) ? $modx->fromJSON($sortConfig) : array();\\n$configs = $modx->getOption(\'configs\', $scriptProperties, \'\');\\n$configs = explode(\',\', $configs);\\n$toSeparatePlaceholders = $modx->getOption(\'toSeparatePlaceholders\', $scriptProperties, false);\\n$toPlaceholder = $modx->getOption(\'toPlaceholder\', $scriptProperties, false);\\n$outputSeparator = $modx->getOption(\'outputSeparator\', $scriptProperties, \'\');\\n\\/\\/$placeholdersKeyField = $modx->getOption(\'placeholdersKeyField\', $scriptProperties, \'MIGX_id\');\\n$placeholdersKeyField = $modx->getOption(\'placeholdersKeyField\', $scriptProperties, \'id\');\\n$toJsonPlaceholder = $modx->getOption(\'toJsonPlaceholder\', $scriptProperties, false);\\n$jsonVarKey = $modx->getOption(\'jsonVarKey\', $scriptProperties, \'migx_outputvalue\');\\n$prefix = isset($scriptProperties[\'prefix\']) ? $scriptProperties[\'prefix\'] : null; \\n\\n$packageName = $scriptProperties[\'packageName\'];\\n$joins = $modx->getOption(\'joins\',$scriptProperties,\'\'); \\n$joins = !empty($joins) ? $modx->fromJson($joins) : false;\\n\\n$packagepath = $modx->getOption(\'core_path\') . \'components\\/\' . $packageName . \'\\/\';\\n$modelpath = $packagepath . \'model\\/\';\\n\\n$modx->addPackage($packageName, $modelpath, $prefix);\\n$classname = $scriptProperties[\'classname\'];\\n\\n$base_path = $modx->getOption(\'base_path\', null, MODX_BASE_PATH);\\n$base_url = $modx->getOption(\'base_url\', null, MODX_BASE_URL);\\n\\n$migx = $modx->getService(\'migx\', \'Migx\', $modx->getOption(\'migx.core_path\', null, $modx->getOption(\'core_path\') . \'components\\/migx\\/\') . \'model\\/migx\\/\', $scriptProperties);\\nif (!($migx instanceof Migx))\\n    return \'\';\\n\\/\\/$modx->migx = &$migx;\\n$defaultcontext = \'web\';\\n$migx->working_context = isset($modx->resource) ? $modx->resource->get(\'context_key\') : $defaultcontext;\\n\\n$properties = array();\\nforeach ($scriptProperties as $property => $value) {\\n    $properties[\'property.\' . $property] = $value;\\n}\\n\\n$idx = 0;\\n$output = array();\\n$c = $modx->newQuery($classname);\\n$c->select($modx->getSelectColumns($classname,$classname));\\n\\nif ($joins) {\\n    $migx->prepareJoins($classname,$joins,$c);\\n}\\n\\nif (!empty($where)) {\\n    $c->where($where);\\n}\\n\\nif (!empty($queries)) {\\n    foreach ($queries as $key=>$query){\\n        $c->where($query,$key);\\n    }\\n    \\n}\\n\\nif (is_array($sortConfig)) {\\n    foreach ($sortConfig as $sort) {\\n        $sortby = $sort[\'sortby\'];\\n        $sortdir = isset($sort[\'sortdir\']) ? $sort[\'sortdir\'] : \'ASC\';\\n        $c->sortby($sortby, $sortdir);\\n    }\\n}\\n\\n$c->prepare();echo $c->toSql();\\n\\nif ($collection = $modx->getCollection($classname, $c)) {\\n    foreach ($collection as $object) {\\n        $fields = $object->toArray();\\n        if ($toJsonPlaceholder) {\\n            $output[] = $fields;\\n        } else {\\n            $fields[\'_alt\'] = $idx % 2;\\n            $idx++;\\n            $fields[\'_first\'] = $idx == 1 ? true : \'\';\\n            $fields[\'_last\'] = $idx == $limit ? true : \'\';\\n            $fields[\'idx\'] = $idx;\\n            $rowtpl = $tpl;\\n            \\/\\/get changing tpls from field\\n            if (substr($tpl, 0, 7) == \\"@FIELD:\\") {\\n                $tplField = substr($tpl, 7);\\n                $rowtpl = $fields[$tplField];\\n            }\\n\\n            if (!isset($template[$rowtpl])) {\\n                if (substr($rowtpl, 0, 6) == \\"@FILE:\\") {\\n                    $template[$rowtpl] = file_get_contents($modx->config[\'base_path\'] . substr($rowtpl, 6));\\n                } elseif (substr($rowtpl, 0, 6) == \\"@CODE:\\") {\\n                    $template[$rowtpl] = substr($tpl, 6);\\n                } elseif ($chunk = $modx->getObject(\'modChunk\', array(\'name\' => $rowtpl), true)) {\\n                    $template[$rowtpl] = $chunk->getContent();\\n                } else {\\n                    $template[$rowtpl] = false;\\n                }\\n            }\\n\\n            $fields = array_merge($fields, $properties);\\n\\n            if ($template[$rowtpl]) {\\n                $chunk = $modx->newObject(\'modChunk\');\\n                $chunk->setCacheable(false);\\n                $chunk->setContent($template[$rowtpl]);\\n                if (!empty($placeholdersKeyField) && isset($fields[$placeholdersKeyField])) {\\n                    $output[$fields[$placeholdersKeyField]] = $chunk->process($fields);\\n                } else {\\n                    $output[] = $chunk->process($fields);\\n                }\\n            } else {\\n                if (!empty($placeholdersKeyField)) {\\n                    $output[$fields[$placeholdersKeyField]] = \'<pre>\' . print_r($fields, 1) . \'<\\/pre>\';\\n                } else {\\n                    $output[] = \'<pre>\' . print_r($fields, 1) . \'<\\/pre>\';\\n                }\\n            }\\n        }\\n\\n\\n    }\\n}\\n\\n\\nif ($toJsonPlaceholder) {\\n    $modx->setPlaceholder($toJsonPlaceholder, $modx->toJson($output));\\n    return \'\';\\n}\\n\\nif (!empty($toSeparatePlaceholders)) {\\n    $modx->toPlaceholders($output, $toSeparatePlaceholders);\\n    return \'\';\\n}\\n\\/*\\nif (!empty($outerTpl))\\n$o = parseTpl($outerTpl, array(\'output\'=>implode($outputSeparator, $output)));\\nelse \\n*\\/\\nif (is_array($output)) {\\n    $o = implode($outputSeparator, $output);\\n} else {\\n    $o = $output;\\n}\\n\\nif (!empty($toPlaceholder)) {\\n    $modx->setPlaceholder($toPlaceholder, $o);\\n    return \'\';\\n}\\n\\nreturn $o;","locked":0,"properties":null,"moduleguid":"","static":0,"static_file":"","content":"$tpl = $modx->getOption(\'tpl\', $scriptProperties, \'\');\\n$limit = $modx->getOption(\'limit\', $scriptProperties, \'0\');\\n$offset = $modx->getOption(\'offset\', $scriptProperties, 0);\\n$totalVar = $modx->getOption(\'totalVar\', $scriptProperties, \'total\');\\n\\n$where = $modx->getOption(\'where\', $scriptProperties, \'\');\\n$where = !empty($where) ? $modx->fromJSON($where) : array();\\n$queries = $modx->getOption(\'queries\', $scriptProperties, \'\');\\n$queries = !empty($queries) ? $modx->fromJSON($queries) : array();\\n$sortConfig = $modx->getOption(\'sortConfig\', $scriptProperties, \'\');\\n$sortConfig = !empty($sortConfig) ? $modx->fromJSON($sortConfig) : array();\\n$configs = $modx->getOption(\'configs\', $scriptProperties, \'\');\\n$configs = explode(\',\', $configs);\\n$toSeparatePlaceholders = $modx->getOption(\'toSeparatePlaceholders\', $scriptProperties, false);\\n$toPlaceholder = $modx->getOption(\'toPlaceholder\', $scriptProperties, false);\\n$outputSeparator = $modx->getOption(\'outputSeparator\', $scriptProperties, \'\');\\n\\/\\/$placeholdersKeyField = $modx->getOption(\'placeholdersKeyField\', $scriptProperties, \'MIGX_id\');\\n$placeholdersKeyField = $modx->getOption(\'placeholdersKeyField\', $scriptProperties, \'id\');\\n$toJsonPlaceholder = $modx->getOption(\'toJsonPlaceholder\', $scriptProperties, false);\\n$jsonVarKey = $modx->getOption(\'jsonVarKey\', $scriptProperties, \'migx_outputvalue\');\\n$prefix = isset($scriptProperties[\'prefix\']) ? $scriptProperties[\'prefix\'] : null; \\n\\n$packageName = $scriptProperties[\'packageName\'];\\n$joins = $modx->getOption(\'joins\',$scriptProperties,\'\'); \\n$joins = !empty($joins) ? $modx->fromJson($joins) : false;\\n\\n$packagepath = $modx->getOption(\'core_path\') . \'components\\/\' . $packageName . \'\\/\';\\n$modelpath = $packagepath . \'model\\/\';\\n\\n$modx->addPackage($packageName, $modelpath, $prefix);\\n$classname = $scriptProperties[\'classname\'];\\n\\n$base_path = $modx->getOption(\'base_path\', null, MODX_BASE_PATH);\\n$base_url = $modx->getOption(\'base_url\', null, MODX_BASE_URL);\\n\\n$migx = $modx->getService(\'migx\', \'Migx\', $modx->getOption(\'migx.core_path\', null, $modx->getOption(\'core_path\') . \'components\\/migx\\/\') . \'model\\/migx\\/\', $scriptProperties);\\nif (!($migx instanceof Migx))\\n    return \'\';\\n\\/\\/$modx->migx = &$migx;\\n$defaultcontext = \'web\';\\n$migx->working_context = isset($modx->resource) ? $modx->resource->get(\'context_key\') : $defaultcontext;\\n\\n$properties = array();\\nforeach ($scriptProperties as $property => $value) {\\n    $properties[\'property.\' . $property] = $value;\\n}\\n\\n$idx = 0;\\n$output = array();\\n$c = $modx->newQuery($classname);\\n$c->select($modx->getSelectColumns($classname,$classname));\\n\\nif ($joins) {\\n    $migx->prepareJoins($classname,$joins,$c);\\n}\\n\\nif (!empty($where)) {\\n    $c->where($where);\\n}\\n\\nif (!empty($queries)) {\\n    foreach ($queries as $key=>$query){\\n        $c->where($query,$key);\\n    }\\n    \\n}\\n\\nif (is_array($sortConfig)) {\\n    foreach ($sortConfig as $sort) {\\n        $sortby = $sort[\'sortby\'];\\n        $sortdir = isset($sort[\'sortdir\']) ? $sort[\'sortdir\'] : \'ASC\';\\n        $c->sortby($sortby, $sortdir);\\n    }\\n}\\n\\n$c->prepare();echo $c->toSql();\\n\\nif ($collection = $modx->getCollection($classname, $c)) {\\n    foreach ($collection as $object) {\\n        $fields = $object->toArray();\\n        if ($toJsonPlaceholder) {\\n            $output[] = $fields;\\n        } else {\\n            $fields[\'_alt\'] = $idx % 2;\\n            $idx++;\\n            $fields[\'_first\'] = $idx == 1 ? true : \'\';\\n            $fields[\'_last\'] = $idx == $limit ? true : \'\';\\n            $fields[\'idx\'] = $idx;\\n            $rowtpl = $tpl;\\n            \\/\\/get changing tpls from field\\n            if (substr($tpl, 0, 7) == \\"@FIELD:\\") {\\n                $tplField = substr($tpl, 7);\\n                $rowtpl = $fields[$tplField];\\n            }\\n\\n            if (!isset($template[$rowtpl])) {\\n                if (substr($rowtpl, 0, 6) == \\"@FILE:\\") {\\n                    $template[$rowtpl] = file_get_contents($modx->config[\'base_path\'] . substr($rowtpl, 6));\\n                } elseif (substr($rowtpl, 0, 6) == \\"@CODE:\\") {\\n                    $template[$rowtpl] = substr($tpl, 6);\\n                } elseif ($chunk = $modx->getObject(\'modChunk\', array(\'name\' => $rowtpl), true)) {\\n                    $template[$rowtpl] = $chunk->getContent();\\n                } else {\\n                    $template[$rowtpl] = false;\\n                }\\n            }\\n\\n            $fields = array_merge($fields, $properties);\\n\\n            if ($template[$rowtpl]) {\\n                $chunk = $modx->newObject(\'modChunk\');\\n                $chunk->setCacheable(false);\\n                $chunk->setContent($template[$rowtpl]);\\n                if (!empty($placeholdersKeyField) && isset($fields[$placeholdersKeyField])) {\\n                    $output[$fields[$placeholdersKeyField]] = $chunk->process($fields);\\n                } else {\\n                    $output[] = $chunk->process($fields);\\n                }\\n            } else {\\n                if (!empty($placeholdersKeyField)) {\\n                    $output[$fields[$placeholdersKeyField]] = \'<pre>\' . print_r($fields, 1) . \'<\\/pre>\';\\n                } else {\\n                    $output[] = \'<pre>\' . print_r($fields, 1) . \'<\\/pre>\';\\n                }\\n            }\\n        }\\n\\n\\n    }\\n}\\n\\n\\nif ($toJsonPlaceholder) {\\n    $modx->setPlaceholder($toJsonPlaceholder, $modx->toJson($output));\\n    return \'\';\\n}\\n\\nif (!empty($toSeparatePlaceholders)) {\\n    $modx->toPlaceholders($output, $toSeparatePlaceholders);\\n    return \'\';\\n}\\n\\/*\\nif (!empty($outerTpl))\\n$o = parseTpl($outerTpl, array(\'output\'=>implode($outputSeparator, $output)));\\nelse \\n*\\/\\nif (is_array($output)) {\\n    $o = implode($outputSeparator, $output);\\n} else {\\n    $o = $output;\\n}\\n\\nif (!empty($toPlaceholder)) {\\n    $modx->setPlaceholder($toPlaceholder, $o);\\n    return \'\';\\n}\\n\\nreturn $o;"}',
        'guid' => 'cc859ce7e06040caa925aa80dce9c773',
        'native_key' => 7,
        'signature' => '5d12b7387d949c31492a033a2fbb4802',
      ),
      '8890a501bfeb55e9d708fddf6f584a56' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":34,"source":0,"property_preprocess":0,"name":"migxResourceMediaPath","description":"","editor_type":0,"category":1,"cache_type":0,"snippet":"$pathTpl = $modx->getOption(\'pathTpl\', $scriptProperties, \'\');\\n$docid = $modx->getOption(\'docid\', $scriptProperties, \'\');\\n\\nif (empty($docid) && $modx->getPlaceholder(\'docid\')) {\\n    $docid = $modx->getPlaceholder(\'docid\');\\n}\\nif (empty($docid)) {\\n\\n    if (is_Object($modx->resource)) {\\n        $docid = $modx->resource->get(\'id\');\\n    } else {\\n\\n        $parsedUrl = parse_url($_SERVER[\'HTTP_REFERER\']);\\n        parse_str($parsedUrl[\'query\'], $parsedQuery);\\n\\n        if (isset($parsedQuery[\'amp;id\'])) {\\n            $docid = $parsedQuery[\'amp;id\'];\\n        } elseif (isset($parsedQuery[\'id\'])) {\\n            $docid = $parsedQuery[\'id\'];\\n        }\\n    }\\n}\\n\\n\\n$path = str_replace(\'{id}\', $docid, $pathTpl);\\n$fullpath = $modx->getOption(\'base_path\') . $path;\\n\\nif (!file_exists($fullpath)) {\\n    mkdir($fullpath, 0755, true);\\n}\\n\\n\\nreturn $path;","locked":0,"properties":null,"moduleguid":"","static":0,"static_file":"","content":"$pathTpl = $modx->getOption(\'pathTpl\', $scriptProperties, \'\');\\n$docid = $modx->getOption(\'docid\', $scriptProperties, \'\');\\n\\nif (empty($docid) && $modx->getPlaceholder(\'docid\')) {\\n    $docid = $modx->getPlaceholder(\'docid\');\\n}\\nif (empty($docid)) {\\n\\n    if (is_Object($modx->resource)) {\\n        $docid = $modx->resource->get(\'id\');\\n    } else {\\n\\n        $parsedUrl = parse_url($_SERVER[\'HTTP_REFERER\']);\\n        parse_str($parsedUrl[\'query\'], $parsedQuery);\\n\\n        if (isset($parsedQuery[\'amp;id\'])) {\\n            $docid = $parsedQuery[\'amp;id\'];\\n        } elseif (isset($parsedQuery[\'id\'])) {\\n            $docid = $parsedQuery[\'id\'];\\n        }\\n    }\\n}\\n\\n\\n$path = str_replace(\'{id}\', $docid, $pathTpl);\\n$fullpath = $modx->getOption(\'base_path\') . $path;\\n\\nif (!file_exists($fullpath)) {\\n    mkdir($fullpath, 0755, true);\\n}\\n\\n\\nreturn $path;"}',
        'guid' => '5339f75b168ed4cf169a88399c418d78',
        'native_key' => 34,
        'signature' => '89ced0894c8845a9ddc5756b4f5ef70c',
      ),
      'afb63ffb77232a2a96660619452a1fcd' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":35,"source":0,"property_preprocess":0,"name":"migxImageUpload","description":"","editor_type":0,"category":1,"cache_type":0,"snippet":"return include $modx->getOption(\'core_path\').\'components\\/migx\\/model\\/imageupload\\/imageupload.php\';","locked":0,"properties":null,"moduleguid":"","static":0,"static_file":"","content":"return include $modx->getOption(\'core_path\').\'components\\/migx\\/model\\/imageupload\\/imageupload.php\';"}',
        'guid' => 'e40ce0c1056e7c428db7d988fb631e49',
        'native_key' => 35,
        'signature' => 'eab151f04fe32f27da2f27d8b2a7de95',
      ),
    ),
  ),
  'related_object_attributes' => 
  array (
    'Chunks' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'name',
    ),
    'TemplateVars' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'name',
    ),
    'Templates' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'templatename',
    ),
    'Snippets' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'name',
    ),
  ),
  'namespace' => 'migx',
  'resolve' => 
  array (
    0 => 
    array (
      'type' => 'file',
      'body' => '{"source":"migx-2.3.2-pl\\/modCategory\\/eccf2b9b88b589b4190a0b5fc7530d6e\\/0\\/","target":"return MODX_ASSETS_PATH . \'components\\/\';","name":"migx"}',
    ),
    1 => 
    array (
      'type' => 'file',
      'body' => '{"source":"migx-2.3.2-pl\\/modCategory\\/eccf2b9b88b589b4190a0b5fc7530d6e\\/1\\/","target":"return MODX_CORE_PATH . \'components\\/\';","name":"migx"}',
    ),
    2 => 
    array (
      'type' => 'file',
      'body' => '{"source":"migx-2.3.2-pl\\/modCategory\\/eccf2b9b88b589b4190a0b5fc7530d6e\\/2\\/","target":"return \\"\\".MODX_ASSETS_PATH.\\"\\/components\\/\\";","name":"migx"}',
    ),
    3 => 
    array (
      'type' => 'file',
      'body' => '{"source":"migx-2.3.2-pl\\/modCategory\\/eccf2b9b88b589b4190a0b5fc7530d6e\\/3\\/","target":"return \\"\\".MODX_CORE_PATH.\\"\\/components\\/\\";","name":"migx"}',
    ),
  ),
  'validate' => NULL,
  'vehicle_package' => 'transport',
  'vehicle_class' => 'xPDOObjectVehicle',
  'guid' => 'eff2e54681f133f9ba4b183f2f349780',
  'package' => 'modx',
  'class' => 'modCategory',
  'signature' => 'eccf2b9b88b589b4190a0b5fc7530d6e',
  'native_key' => 1,
  'object' => '{"id":1,"parent":0,"category":"MIGX"}',
);