
http://modx-shopkeeper.ru/ - Shopkeeper

http://www.simpledream.ru/ - Studio "Simple Dream"

---------------------------------------

Installation

1.
    * You can download the extra in manager. To do this, go to "System" -> "Package Management". Press the button "Download extras". Then go "Extras" -> "E-commerce" and the line "Shopkeeper" click "Download", then "Finish" button.
    
    * If you downloaded the file from modx.com (http://modx.com/extras/package/shopkeeper2), load file "shopkeeper-2.0-*.transport.zip" in folder /core/packages/ of your site. In manager go to "System" -> "Package Management" -> "Search Locally for Packages" -> "Download extras" -> "Yes".

2. The table package will package "shopkeeper". Click "Install" button.

3. Complete the installation.

Settings

1. Open "Elements" -> "Snippets" -> "Shopkeeper" -> "Properties".

2. Press button "Add Property Set", mark checkbox "Create New Property Set" and fill fields.

3. In the list on the left to select a set of established and if necessary, change the settings.

4. In the template in a place where you want to display a shopping cart, call Shopkeeper snippet with name of Property Set. Example:

[[!Shopkeeper@cart_catalog?propertySetName=`cart_catalog`]]

propertySetName - the name of the Property Set. It is also the name you specify after the "@" symbol.

Default properties of snippet edit is not recommended because these may change at upgrade.

In the admin panel in the configuration of the component (the "System" -> "System Settings" -> "shopkeeper") set "Default snippet Property Set". This set of parameters to be used when sending the order.

Products are created as resources. For convenience, you can use the component "Group Edit" (http://modx.com/extras/package/groupedit).

---------------------------------------

Setting the context "catalog"

Product placement in a particular context is optional, but recommended if you plan a lot of products (over 2000). This will allow for the catalog to make individual settings, such as when to turn off the friendly URL (friendly_urls).

Create a context "catalog". Configuration context:
error_page: 10
unauthorized_page: 11

Create in the context "catalog" document-container "Catalog" with the alias "catalog". Inside, create a catalog structure.

Access rights context "catalog" ("System" -> "Contexts" -> "catalog -> Update context" -> "Access Permissions") should be the same as in the context of "web", ie:
anonymous, 9999, Load only
Administrator, 0, Administrator

In the context "web" create document-Weblink "Catalog", in the field "Weblink" enter "catalog/".

Check the plugin "contextSwitch" to be installed (core/components/shopkeeper/elements/plugins/context_switch.php).

If you use a check, you must create a user group. To do this, go the "Security" -> "Access Control".
Press the "New User Group" and enter a name such as "Customers". Next, right click on the group and choose "Update User Group".
Go to the tab "Context Access". Click "Add Context", choose the context "web", Minimum Role - 9999, Access Policy - Load only. Also add context "catalog" (access to the context of "mgr" should not be).
Reload this right of access: "Security" -> "Flush Permissions".

---------------------------------------

Additional options products:

Goods can be assigned to the parameters that the buyer can choose to add items to your shopping cart.
The parameters are displayed in a dropdown list - shk_select, radio buttons - shk_radio or checkboxes - shk_checkbox.
Choose Output Type can be on TV settings on the tab "Output Options".

The values ​​of the parameters (on the edit page of the resource (product)) are introduced on the following principle:
Parameter name 1==Price 1||Parameter name 2==Price 2||...

You can enter a parameter value with the sign of multiplication: Weight==*0.5||Weight==*1
In this case, the product price will be multiplied by the price parameter.

In the snippet getResources chunk parameters are displayed as placeholders: [[+tv.param1]].

On the product page to change the ID parameter. You can do this by using a filter "replace":
[[*param1:replace=`[[+id]]==[[*id]]`]]

Controller output options: core/model/modx/processors/element/tv/renders/mgr/properties/
Output Options: manager/templates/default/element/tv/renders/properties/
Controller output: core/model/modx/processors/element/tv/renders/web/output/

---------------------------------------

param-edit

For comfortably input parameters and prices, use the input type "param-edit".

In the type of input parameters can be set: the width of the field, the number of fields in a row, the default value.

This type of entry can also be used to create tables of characteristics of the goods. To display a table on the site, you can use a snippet "param_edit_table" (shopkeeper/elements/snippets/param_edit_table.php).

Example of use:

[[include?
&file=`core/components/shopkeeper/elements/snippets/param_edit_table.php`
&tvName=`options`
&tpl=`properties_table`
]]

An example of chunk "tpl" (divided into 3 parts):

<table>[[+inner]]</table>
<!--tpl_separator-->
<tr class="[[+row_even]]">
    [[+inner]]
</tr>
<!--tpl_separator-->
<td>[[+col_num]]. [[+field]]</td>

---

The code snippet "include":

<?php
if (file_exists(MODX_BASE_PATH.$file)){
   $o = include MODX_BASE_PATH.$file;
}else{ $o = 'File not found at: '.$file; }
return $o;

---------------------------------------

Sending letters to the buyer when you change the order status:

If you want when to change the order status the buyer sends an e-mail, in the module configuration (basic settings) need to create a parameter with a key "shk.mailstatus_1", where 1 - number status of zero.
The value parameter to specify the name of the chunk letter template, example "@FILE mailChangeStatus.tpl". Namespace - "shopkeeper".

---------------------------------------

The output of goods (from the context of "catalog"):

[[!getPage?
&elementClass=`modSnippet`
&element=`getProducts`
&tplPath=`core/components/shopkeeper/elements/chunks/ru/`
&tpl=`@FILE product1.tpl`
&context=`catalog`
&includeTVs=`1`
&includeTVList=`price,image,producer,country`
&limit=`10`
&pageFirstTpl=` <li class="control"><a [[+classes]] href="[[+href]]">Первая</a></li> `
&pageLastTpl=` <li class="control"><a [[+classes]] href="[[+href]]">Последняя</a> </li> `
]]
<br class="clear" />
<ul class="pages">
[[!+page.nav]]
</ul>

Used snippets getPage and getProducts. Instead getProducts, you can use getResources.

http://modx.com/extras/package/getproducts

======================================

Templates and placeholders:

cartRowTpl
Template (chunk) lines with information about a product in your shopping cart

[[+name]] - product name;
[[+id]] - product ID;
[[+link]] - link to product page;
[[+addit_data]] - additional parameters of the products;
[[+price]] - product price;
[[+price_total]] - the total price of the product, including additional options;
[[+price_count]] - product price, multiplied by the number;
[[+currency]] - currency product;
[[+count]] - quantity of products;
[[+this_page_url]] - address of the current page;
[[+index]] - serial number of products in the basket from zero;
[[+num]] - serial number of products in the basket from one;
[[+even]] - odd or even product (print 1 или 0);
[[+comma]] - comma (between products);
[[+url_del_item]] - link to the removal of product from the cart;
[[+available]] - available (print "available") or not (print "notavailable") product for sale;
[[+s]] - if the product is not available for purchase, prints the opening tag <s>;
[[+/s]] - if the product is not available for purchase, prints the closing tag </s>;
[[+любой TV]] - any TV, example [[+image]];
[[+shk_любой TV]] - any additional parameter, selected you add an item to cart (из [[+addit_data]]), example [[+shk_param1]].

cartTpl
Template (chunk) of shopping cart

[[+inner]] - list op products (chunk cartRowTpl);
[[+price_total]] - total price of products in your shopping cart;
[[+items_total]] - the total number of items in the cart;
[[+items_unique_total]] - total number of unique items in the cart;
[[+plural]] - the word "product" in the plural, depending on the number of selected items;
[[+this_page_url]] - address of the current page;
[[+empty_url]] - link to empty the cart;
[[+order_page_url]] - link to the ordering page;
[[+currency]] - currency products;
[[+plugin]] - output plug to the event "OnSHKcartLoad".

additDataTpl
Template to additional parameters in the shopping cart

[[+param]] - parameter name and price;
[[+name]] - name of the parameter;
[[+price]] - price of the parameter.

orderDataTpl (in a snippet) and order_data_tpl (in the component settings)
A template for the contents of the order (in the letter and the component)

[[+price_total]] - total price of goods in your shopping cart;
[[+items_total]] - the total number of items in the cart;
[[+items_unique_total]] - total number of unique items in the cart;
[[+currency]] - currency products;
[[+loop]], [[+end_loop]] - beginning and end of a row of data products (loop). Inside access to all of the placeholders cartRowTpl.


emailTpl
Template letter ordering of snippet FromIt

[[+orderID]] - order ID;
[[+orderData]] - Items in the order of template "orderDataTpl";
[[+date]] - date and time of the order.

======================================

Selecting and adding to the order of the method of delivery

List of shipping methods and prices can be created in the component configuration. To display and add a method to deliver the order, you can use plugin "shk_delivery".
Check that in manager was created plugin with the event "OnSHKbeforeCartLoad" and which uses a code from a file core/components/shopkeeper/elements/plugins/delivery.php.
On the tab "Properties" on plugin page you can customize the template to list the delivery methods. The plugin creates placeholder "shk_delivery".

Example:
<select name="shk_delivery">
    [[+shk_delivery]]
</select>

After submiting the order form delivery will be added to orders.

======================================

JS-callback functions:

SHKfillCartCallback(form) - given command to add product to cart;
SHKemptyCartCallback() - given the command to empty the cart;
SHKloadCartCallback() - Cart is loaded / updated;
SHKtoCartCallback(form) - given the command to send product to cart.

Simply create a function with these names and they will be called when a certain action.

--------------------------------------

Events for plugins:

OnSHKaddProduct - Adding Item to cart. $purchaseArray
OnSHKgetProductPrice - Call for Price product when you add to cart. $purchaseArray
OnSHKcalcTotalPrice - Calculating the total price of the products in your cart. $price_total, $purchases
OnSHKbeforeCartLoad - Called before the formation of HTML-code cart.
OnSHKcartLoad - The output cart. $items_total, $price_total
OnSHKChangeStatus - Change the order status. Available: $order_id, $status.
OnSHKsaveOrder - Sending an order. $order_id

======================================

Ordering:

[[!Shopkeeper@order_page?propertySetName=`order_page`]]

[[!FormIt?
&hooks=`spam,shk_fihook,email,redirect`
&emailTpl=`shopOrderReport`
&emailTo=`xxx@xxx.xx`
&redirectTo=`13`
&validate=`address:required,fullname:required,email:email:required,phone:required`
&errTpl=`<br /><span class="error">[[+error]]</span>`
]]

[[!$shopOrderForm]]

--------------------------------

Chunk shopOrderForm: core/components/shopkeeper/elements/chunks/en/shopOrderForm.tpl

-------------------------------------

Chunk shopOrderReport: core/components/shopkeeper/elements/chunks/en/shopOrderReport.tpl

============================================

Authorization:

[[!Login?
&loginTpl=`lgnLoginTpl`
&logoutTpl=`lgnLogoutTpl`
&errTpl=`lgnErrTpl`
&logoutResourceId=`1`
]]

-----------------------------------------

lgnLoginTpl:

<div class="loginForm">
    <div class="loginMessage">[[+errors]]</div>
    <div class="loginLogin">

<form class="loginLoginForm" action="[[~[[*id]]]]" method="post">
<fieldset class="loginLoginFieldset">
    <input class="returnUrl" type="hidden" name="returnUrl" value="[[+request_uri]]" />
    <input class="loginLoginValue" type="hidden" name="service" value="login" />
    
    <p><label id="loginUsername">[[%login.username]]</label></p>
    <p><input id="loginUsername" type="text" name="username" /></p>
    
    <p><label id="loginPassword">[[%login.password]]</p>
    <p><input id="loginPassword" type="password" name="password" /></p>
    
    <p><input type="submit" name="Login" value="[[+actionMsg]]" /></p>
</fieldset>
</form>

<p><a href="[[~14]]">Registration</a></p>

    </div>
</div>

-----------------------------------------

lgnLogoutTpl:

<p>Hello, [[!+modx.user.id:userinfo=`fullname`]]!</p>
<p>
    <a href="[[~15]]">Profile</a>
    &nbsp;&nbsp;
    <a href="[[+logoutUrl]]">Logout</a>
</p>

===========================================

Registration:

[[!Register?
    &submitVar=`registerbtn`
    &activationEmailTpl=`lgnActivationEmailTpl`
    &activationEmailSubject=`Спасибо за регистрацию!`
    &submittedResourceId=`3`
    &usergroups=`Покупатели`
    &activation=`0`
    &validate=`nospam:blank,
      username:required,
      password:required,
      password_confirm:password_confirm=^password^,
      fullname:required,
      email:required:email`
    &placeholderPrefix=`reg.`
]]

<div class="registerMessage">[[!+reg.error.message]]</div>
     
<form class="form" action="[[~[[*id]]]]" method="post">
<input type="hidden" name="nospam" value="[[!+reg.nospam]]" />

<table cellpadding="5">
    <tr>
        <td>Username*:</td>
        <td>
            <input type="text" name="username" id="username" value="[[!+reg.username]]" />
            <div class="error">[[!+reg.error.username]]</div>
        </td>
    </tr>
    <tr>
        <td>Password*:</td>
        <td>
            <input type="password" name="password" id="password" value="[[!+reg.password]]" />
            <div class="error">[[!+reg.error.password]]</div>
        </td>
    </tr>
    <tr>
        <td>Confirm password*:</td>
        <td>
            <input type="password" name="password_confirm" id="password_confirm" value="[[!+reg.password_confirm]]" />
            <div class="error">[[!+reg.error.password_confirm]]</div>
        </td>
    </tr>
    <tr>
        <td>Name*:</td>
        <td>
            <input type="text" name="fullname" id="fullname" value="[[!+reg.fullname]]" />
            <div class="error">[[!+reg.error.fullname]]</div>
        </td>
    </tr>
    <tr>
        <td>E-mail*:</td>
        <td>
            <input type="text" name="email" id="email" value="[[!+reg.email]]" />
            <div class="error">[[!+reg.error.email]]</div>
        </td>
    </tr>
    <tr>
        <td>Phone:</td>
        <td>
            <input type="text" name="phone" id="phone value="[[!+reg.phone]]" />
            <div class="error">[[!+reg.error.phone]]</div>
        </td>
    </tr>
    <tr>
        <td>Delivery address:</td>
        <td>
            <textarea name="address" id="address">[[!+reg.address]]</textarea>
            <div class="error">[[!+reg.error.address]]</div>
        </td>
    </tr>
    <tr>
        <td><input type="submit" name="registerbtn" value="Register" /></td>
        <td></td>
    </tr>
</table>

</form>


------------------------------------------

[[!UpdateProfile? &placeholderPrefix=`usr`]]

<div class="error">[[+error.message]]</div>

[[+login.update_success:if=`[[+login.update_success]]`:is=`1`:then=`<div>The changes are saved.</div>`]]

<form class="form" action="[[~[[*id]]]]" method="post">

<table cellpadding="5">
    <tr>
        <td>Name:</td>
        <td>
            <input type="text" name="fullname" id="fullname" value="[[!+usr.fullname]]" />
            <div class="error">[[!+usr.error.fullname]]</div>
        </td>
    </tr>
    <tr>
        <td>E-mail:</td>
        <td>
            <input type="text" name="email" id="email" value="[[!+usr.email]]" />
            <div class="error">[[!+usr.error.email]]</div>
        </td>
    </tr>
    <tr>
        <td>Phone:</td>
        <td>
            <input type="text" name="phone" id="phone" value="[[!+usr.phone]]" />
            <div class="error">[[!+usr.error.phone]]</div>
        </td>
    </tr>
    <tr>
        <td>Delivery address:</td>
        <td>
            <textarea name="address" id="address">[[!+usr.address]]</textarea>
            <div class="error">[[!+usr.error.address]]</div>
        </td>
    </tr>
    <tr>
        <td><input type="submit" name="registerbtn" value="Save" /></td>
        <td></td>
    </tr>
</table>

</form>
